---
AWSTemplateFormatVersion: '2010-09-09'
Description: KV Service Challenge

Parameters:

  ServicePort:
    Description: Service port [1150-65535]
    Type: Number
    MinValue: 1150
    MaxValue: 65535
    Default: 50051

  ServiceInstanceType:
    Description: Service EC2 instance type [t1.micro,t2.nano,t2.micro,t2.small]
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - m5.large
      - m4.16xlarge
    ConstraintDescription: Must be a valid EC2 instance type.

  # TODO: create a new KeyName (kv-keypair) in this template instead of requiring a pre-existing one
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: "kvServiceSSH"

  SecurityGroupIngressCIDR:
    Description: The IP address range that can be used to communicate to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  VPCID:
    Description: VPC to operate in
    Type: AWS::EC2::VPC::Id
    Default: vpc-62a2391a # TODO: Create a new VPC from scratch

#  SubnetID:
#    Description: Subnet ID List
#    Type: "List<AWS::EC2::Subnet::Id>"
#    Default: '*'

Resources:

  # Key-Value Service
  KVService:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-east-1a
      ImageId: ami-41e0b93b #ami-428aa838
      InstanceType: !Ref ServiceInstanceType
      SecurityGroups:
        - !Ref SSHSecurityGroup
        - !Ref ServiceSecurityGroup
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: KvService
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            # Get the latest CloudFormation package
            yum update -y aws-cfn-bootstrap
            # Start cfn-init
            /opt/aws/bin/cfn-init -s ${AWS::StackId} -r KVService --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
            # Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata
            /opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'
            # All done so signal success
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource KVService --region ${AWS::Region}
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
    Metadata:
      Comment: Install all dependencies
      AWS::CloudFormation::Init:
        install:
          packages:
            yum:
              git: []
              build-essential: []
              cmake: []
              libcurl4-openssl-dev: []
              zlib1g-dev: []
              libssl-dev: []
              libflags-dev: []
              libgtest-dev: []
              clang: []
              libc++-dev: []
              golang: []
              autoconf: []
              libtool: []
          files:
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServerHost.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource KVService --region ${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/systemd/system/kv.service":
              content: !Sub |
                [Service]
                ExecStart=/usr/local/kv-service/bin/kv-server
                StandardOutput=syslog
              owner: "root"
              group: "root"
          sources:
            "/home/ec2-user/aws-sdk-cpp": "https://github.com/aws/aws-sdk-cpp/tarball/master"
            "/home/ec2-user/grpc": "https://github.com/grpc/grpc/tarball/master"
          commands:
            install-aws-sdk:
              command: !Sub |
                mkdir build && cd build
                cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_ONLY="dynamodb;kms" -DENABLE_TESTING=Off ..
                make && make install
              cwd: "/home/ec2-user/aws-sdk-cpp"
              ignoreErrors : false
            install-grpc:
              command: !Sub |
                git submodule update --init
                make && make install
                mkdir build && cd build
                cmake ..
                make && make install
              cwd: "/home/ec2-user/grpc"
              ignoreErrors : false
          services:
            sysvinit:
              kv:
                enabled: 'true'
                ensureRunning: 'true'
#                packages: yum: - "KV-Service" A map of package manager to list of package names. If cfn-init installs or updates one of these packages, this service will be restarted.

  # An elastic IP for our instance
  KVServiceEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref KVService

  IPAssoc:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref 'KVService'
      EIP: !Ref 'KVServiceEIP'
      
  # Security group: SSH Access
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - CidrIp: !Ref SecurityGroupIngressCIDR
        IpProtocol: tcp
        FromPort: 22
        ToPort: 22

  # Security group: Service Access
  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow connections to service port
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: tcp
        FromPort: !Ref ServicePort
        ToPort: !Ref ServicePort

  ServiceDynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "kvTable"
      AttributeDefinitions:
      - AttributeName: "key"
        AttributeType: "S"
      KeySchema:
      - AttributeName: "key"
        KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 25
        WriteCapacityUnits: 25

  WriteCapacityScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MaxCapacity: 15
      MinCapacity: 5
      ResourceId: !Join
        - /
        - - table
          - !Ref ServiceDynamoTable
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb

  ScalingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "dynamodb:DescribeTable"
                  - "dynamodb:UpdateTable"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:SetAlarmState"
                  - "cloudwatch:DeleteAlarms"
                Resource: "*"

  WriteScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization

# TODO: Check DynamoDB DEX is enable

  ServiceKMSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action: 'kms:*'
            Resource: '*'
              
  # Internet Gateway
  # ASG (auto scaling group)
  
#Outputs:
#StackSSHSecurityGroup:
#  Description: The SSH Security Group for our Company
#  Value: !Ref MyCompanyWideSSHSecurityGroup
#  Export:
#    Name: SSHSecurityGroup

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Network Configuration"
        Parameters:
          - VPCID
 #         - SubnetID
      - Label:
          default: "Service EC2 Configuration"
        Parameters:
          - ServiceInstanceType
          - ServicePort
          - SecurityGroupIngressCIDR
          - KeyName
    ParameterLabels:
      VPCID:
        default: "Which VPC should this stack be deployed to?"
